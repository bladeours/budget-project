type Query {
    getAccountsPage(page: Page, filter: AccountFilter): AccountsPage

    getTransactions(page: Page): [Transaction]
}

type Mutation {
    addAccount(accountInput: AccountInput!): Account
    deleteAccount(hash: ID!): Boolean

    addTransaction(transactionInput: TransactionInput!): Transaction
}

type AccountsPage {
    content: [Account]
    number: Int
    size: Int
    totalElements: Int
    totalPages: Int

}

type Account {
    hash: ID!
    name: String!
    description: String
    balance: Float!
    color: String!
    archived: Boolean!
    parentId: Int
    accountType: AccountType!
    currency: Currency!

}

type Transaction {
    name: String
    note: String
    amount: Float
    date: String
    need: Boolean
    hash: String
    accountTo: Account
    accountFrom: Account
    transactionType: TransactionType
    category: Category

}

type Category {
    name: String
    color: String
    hash: String
    income: Boolean
    parentId: Int
}

input TransactionInput{
    name: String
    amount: Float
    date: String
    need: Boolean
    accountToHash: String
    accountFromHash: String
    transactionType: TransactionType
    categoryHash: String
    currency: Currency
}

input AccountInput{
    accountType: AccountType!
    balance: Float!
    color: String!
    currency: Currency!
    description: String
    name: String
    parentId: Int
}

input CategoryInput {
    name: String!
    color: String!
    income: Boolean!
    parentId: Int
}

input Page {
    number: Int!
    size: Int!
}

enum TransactionType {
    INCOME
    EXPENSE
    TRANSFER
}

enum Currency {
    PLN
    EUR
}

enum AccountType {
    REGULAR
    SAVINGS
}
